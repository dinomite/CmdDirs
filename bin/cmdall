#!/usr/bin/env perl
use strict;
use warnings;
use Pod::Usage;
use Getopt::Long;
use App::CmdAll;

=head1 NAME

cmdall - perform an action on subdirectories

=head1 SYNOPSIS

cmdall [options] command [dir ...]

If no directories are provided, cmdall will perform the command in all
subdirectories of the current working directory.  Only subdirectories
appropriate for the given command (e.g. git repositories, if your command
    -contains the word "git") or the given directory options are acted upon.

See the man page (-man) for a full list of available directory filters.

=head1 OPTIONS

=over 4

=item B<-h|help>
Show help message

=item B<-m|man>
Show manpage

=item B<-a|all>
Perform command in all directories

=item B<-q|quiet>
Don't print out the commands as they're run

=back

=head1 FILTERS

=over 4

=item B<--git>

=item B<--svn>

=back

=head1 EXAMPLES

Check the status of all Git repos in this directory:
    gitall.pl "git status"

Check the status of the Git repos "foo" and "bar" in this directory:
    gitall.pl "git status" foo bar

=head1 AUTHOR

Drew Stephens <drew@dinomite.net>

=cut

my $options = {};
GetOptions($options,
    'help|h',
    'man|m',
    'all|a',
    'quiet|q',
    'git',
    'svn',
);

pod2usage(-verbose => 1) if ($options->{'help'});
pod2usage(-verbose => 2) if ($options->{'man'});

# We at least need a command
pod2usage(1) unless (scalar(@ARGV) > 0);

my $cmdAll = App::CmdAll->new(\@ARGV, $options);
$cmdAll->run();
